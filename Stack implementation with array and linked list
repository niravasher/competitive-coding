/******************************************************************************

                              Online C++ Compiler.
               Code, Compile, Run and Debug C++ program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

// Stack implementation

#include <bits/stdc++.h>
#define MAX 1000

using namespace std;

// Array implementation of Stack
class Stack {
    int top;
    
    public:
        int a[MAX];
        Stack() { top = -1; }
        bool push(int x);
        int pop();
        int peek();
        bool isEmpty();
};

bool Stack::push(int x) {
    if (top >= (MAX-1)) {
        cout << "Stack overflow" << endl;
        return false;
    }
    else {
        top = top+1;
        a[top] = x;
        cout << x << " has been pushed into the stack" << endl;
        return true;
    }
}

int Stack::pop() {
    if (top < 0) {
        cout << "Stack underflow" << endl;
        return 0;
    }
    else {
        top = top - 1;
        int x = a[top];
        return x;
    }
}

int Stack::peek() {
    if (top < 0) {
        cout << "Stack is empty" << endl;
        return 0;
    }
    else {
        int x = a[top];
        return x;
    }
}

bool Stack::isEmpty() {
    return (top < 0);
}

// Linked List implementation of Stack
class StackNode {
    public:
        int data;
        StackNode* next;
};

StackNode* newNode(int data) {
    StackNode* stackNode = new StackNode();
    stackNode -> data = data;
    stackNode -> next = NULL;
    return stackNode;
}

int isEmpty2(StackNode* root) {
    return !root;
}

void push2(StackNode** root, int data) {
    StackNode* stackNode = newNode(data);
    stackNode -> next = *root;
    *root = stackNode;
    cout << data << " pushed to the stack" << endl;
}

int pop2(StackNode** root) {
    if (isEmpty2(*root)) {
        cout << "Empty Stack";
        return 0;
    }
    else {
        StackNode* temp = *root;
        *root = (*root) -> next;
        int popped = temp -> data;
        free(temp);
        return popped;
    }
}

int peek2(StackNode* root) {
    if (isEmpty2(root)) {
        cout << "Empty Stack";
    }
    else {
        StackNode* temp = root;
        int top = temp -> data;
        return top;
    }
}

int main()
{
    Stack s;
    cout << s.isEmpty();
    cout << endl;
    s.push(10);
    s.push(20);
    s.push(30);
    s.peek();
    cout << s.isEmpty() << endl;
    
    StackNode* root = NULL;
    push2(&root, 100);
    push2(&root, 200);
    push2(&root, 300);
    cout << isEmpty2(root) << endl;
    cout << pop2(&root);
    cout << endl;
    cout << peek2(root);
    cout << endl;

    return 0;
}
