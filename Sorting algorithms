#include <bits/stdc++.h>
using namespace std;

/* SELECTION SORT */
void selection_sort(int arr[], int n) {
    int i, j, min_idx;
    
    for (i = 0 ; i < n-1 ; i++) {
        min_idx = i;
        for (j = i+1 ; j < n ; j++) {
            if (arr[j] < arr[min_idx]) {
                min_idx = j;
            }
            swap(arr[min_idx], arr[i]);
        }
    }
    for (i = 0 ; i < n ; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;
}

/* Bubble sort */
void bubble_sort(int arr[], int n) {
    for (int i = 0 ; i < n-1 ; i++) {
        for (int j = 0 ; j < n ; j++) {
            if (arr[j] > arr[j+1]) {
                swap(arr[j], arr[j+1]);
            }
        }
    }
    for (int i = 0 ; i < n ; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;
}

void recursive_bubbleSort(int arr[], int n) 
{ 
    if (n == 1)
        return;

    for (int i=0; i<n-1; i++)
        if (arr[i] > arr[i+1])
            swap(arr[i], arr[i+1]);
    recursive_bubbleSort(arr, n-1);
}

void printarray(int arr[], int n) {
    for (int i = 0 ; i < n ; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;
}

/* INSERTION SORT */
void insertion_sort(int arr[], int n) {
    int j;
    for (int i = 1 ; i < n ; i++) {
        int key = arr[i];
        int j = i-1;
        
        while( j >= 0 && arr[j] > key) {
            arr[j+1] = arr[j];
            j = j-1;
        }
        arr[j+1] = key;
    }
}

/* MERGE SORT */
void merge(int arr[], int l, int m, int r) {
    int i, j, k; 
    int n1 = m - l + 1; 
    int n2 =  r - m;
    
    int L[n1], R[n2];
    
    for (i = 0; i < n1; i++) 
        L[i] = arr[l + i]; 
    for (j = 0; j < n2; j++) 
        R[j] = arr[m + 1+ j];
        
    i = 0, j = 0, k = l;
    while (i < n1 && j < n2) 
    { 
        if (L[i] <= R[j]) 
        { 
            arr[k] = L[i]; 
            i++; 
        } 
        else
        { 
            arr[k] = R[j]; 
            j++; 
        } 
        k++; 
    }

    while (i < n1) 
    { 
        arr[k] = L[i]; 
        i++; 
        k++; 
    } 

    while (j < n2) 
    { 
        arr[k] = R[j]; 
        j++; 
        k++; 
    }
}

void mergeSort(int arr[], int l, int r) {
    if (l < r) {
        int m = l + (r-l)/2;
        
        mergeSort(arr, l, m);
        mergeSort(arr, m+1, r);
        
        merge(arr, l, m, r);
    }
}

/* QUICK SORT */
int partition(int arr[], int low, int high) {
    int pivot = arr[high];
    int i = low-1;
    
    for (int j = low ; j < high ; j++) {
        if (arr[j] < pivot) {
            i++;
            swap(arr[i], arr[j]);
        }
    }
    swap(arr[i+1], arr[high]);
    return i+1;
}

void quicksort(int arr[], int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);
        
        quicksort(arr, low, pi-1);
        quicksort(arr, pi+1, high);
    }
}

int main()
{
    int arr[] = {5,4,3,2,1};
    int n = sizeof(arr)/sizeof(arr[0]);
    selection_sort(arr, n);
    
    bubble_sort(arr, n);
    
    recursive_bubbleSort(arr, n);
    printarray(arr, n);
    
    insertion_sort(arr, n);
    printarray(arr, n);

    mergeSort(arr, 0, n-1);
    printarray(arr, n);

    quicksort(arr, 0, n-1);
    printarray(arr, n);

    return 0;
}
